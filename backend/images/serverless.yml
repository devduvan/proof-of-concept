service: ${self:custom.app.name}-backend-images

custom: ${file(../serverless.common.yml):custom}

projectDir: ../

package:
  individually: true

plugins:
  - serverless-offline
  - serverless-latest-layer-version

provider:
  name: aws
  region: ${self:custom.region}
  profile: ${self:custom.profile}
  stage: ${self:custom.stage}
  runtime: ${self:custom.runtime}
  architecture: ${self:custom.architecture}
  lambdaHashingVersion: ${self:custom.lambdaHashingVersion}
  httpApi:
    id:
      Fn::ImportValue: ${self:custom.app.name}-id-${self:custom.stage}
  iam:
    role:
      Fn::ImportValue: ${self:custom.app.name}-images-lambda-role-arn-${self:custom.stage}
  layers:
    - ${self:custom.env.${self:custom.stage}.layers.general}
    - { Ref: ImagesLambdaLayer }
  environment:
    ENV: ${self:custom.stage}
    INFRA_LOCALHOST_URL: ${self:custom.env.${self:custom.stage}.INFRA_LOCALHOST_URL}
    GENERAL_LAYER_DIR: ${self:custom.env.${self:custom.stage}.generalLayerDir}
    LAYER_DIR: ${self:custom.env.${self:custom.stage}.layerDir}
    API_BUCKET_NAME: ${self:custom.env.${self:custom.stage}.API_BUCKET_NAME}
    IMAGES_TABLE_NAME: ${self:custom.env.${self:custom.stage}.IMAGES_TABLE_NAME}
    IMAGE_CREATED_TOPIC_ARN: ${self:custom.env.${self:custom.stage}.IMAGE_CREATED_TOPIC_ARN}

layers:
  images:
    path: src/layer
    name: ${self:custom.app.name}-images-${self:custom.stage}
    description: Layer for images
    retain: false

functions:
  createImage:
    name: ${self:custom.app.name}-create-image-${self:custom.stage}
    description: Create an image
    events:
      - httpApi:
          method: POST
          path: /images
          authorizer:
            id:
              Fn::ImportValue: ${self:custom.app.name}-jwt-authorizer-id-${self:custom.stage}
            scopes:
              - images/write
    handler: src/create-image.handler
    package:
      patterns:
        - ${self:custom.env.${self:custom.stage}.layersPattern}
        - src/create-image.js

  getImage:
    name: ${self:custom.app.name}-get-image-${self:custom.stage}
    description: Get an image by id
    events:
      - httpApi:
          method: GET
          path: /images/{id}
          authorizer:
            id:
              Fn::ImportValue: ${self:custom.app.name}-jwt-authorizer-id-${self:custom.stage}
            scopes:
              - images/read
    handler: src/get-image.handler
    package:
      patterns:
        - ${self:custom.env.${self:custom.stage}.layersPattern}
        - src/get-image.js

  updateImageFromThumbnailsTopic:
    name: ${self:custom.app.name}-update-image-from-thumbnails-topic-${self:custom.stage}
    description: Update image from thumbnails generated topic
    events:
      - sns:
          topicName: ${self:custom.app.name}-thumbnails-generated-${self:custom.stage}
          arn:
            Fn::ImportValue: ${self:custom.app.name}-thumbnails-generated-topic-arn-${self:custom.stage}
    handler: src/update-image-from-thumbnails-topic.handler
    package:
      patterns:
        - ${self:custom.env.${self:custom.stage}.layersPattern}
        - src/update-image-from-thumbnails-topic.js
